{"ast":null,"code":"var _jsxFileName = \"E:\\\\MovieBuff_React-Redux\\\\src\\\\table.js\";\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport addMovie from './globals';\nimport Pagination from './pagination';\nimport { FAV_MOVIE_LIST, TO_WATCH_MOVIE_LIST, movieExists } from './globals';\nimport { changePage, refreshMovies } from './actions';\n\nclass Table extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      finalQuery: this.props.query,\n      currentPage: 1\n    };\n  }\n\n  getMovies() {\n    console.log(this.state.finalQuery);\n    if (this.props.query === \"\") return;\n    this.props.refreshMovies();\n  }\n\n  componentDidMount() {\n    this.getMovies();\n  }\n\n  componentDidUpdate(previousProps, previousState) {\n    if (previousState.finalQuery !== this.state.finalQuery) {\n      this.props.changePage(1);\n      /*      this.setState({currentPage: 1}, ()=> { //get back to page number one when searching for a new movie\r\n              this.getMovies();\r\n            });*/\n    } else if (previousState.currentPage !== this.state.currentPage) {\n      this.getMovies();\n    }\n  }\n\n  static getDerivedStateFromProps(props, state) {\n    return {\n      finalQuery: props.query,\n      currentPage: props.currentPage\n    };\n  }\n\n  addToList(id, title, relDate, list) {\n    addMovie(id, title, relDate, list);\n    this.forceUpdate();\n  }\n\n  render() {\n    if (this.props.isAnyData) return React.createElement(\"div\", {\n      className: \"table-container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 54\n      },\n      __self: this\n    }, React.createElement(\"table\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 55\n      },\n      __self: this\n    }, React.createElement(\"thead\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 56\n      },\n      __self: this\n    }, React.createElement(\"tr\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 57\n      },\n      __self: this\n    }, React.createElement(\"th\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 58\n      },\n      __self: this\n    }, \"Title\"), React.createElement(\"th\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 59\n      },\n      __self: this\n    }, \"Release Date\"), React.createElement(\"th\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 60\n      },\n      __self: this\n    }, \"Favorite\"), React.createElement(\"th\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 61\n      },\n      __self: this\n    }, \"To Watch\"))), React.createElement(\"tbody\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 64\n      },\n      __self: this\n    }, this.props.movies.map(row => React.createElement(\"tr\", {\n      key: row.id,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 66\n      },\n      __self: this\n    }, React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 67\n      },\n      __self: this\n    }, row.title), React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 68\n      },\n      __self: this\n    }, row.release_date), React.createElement(\"td\", {\n      className: \"icon\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 69\n      },\n      __self: this\n    }, React.createElement(\"i\", {\n      className: (movieExists(row.id, FAV_MOVIE_LIST) ? \"fas\" : \"far\") + \" fa-star\",\n      onClick: () => {\n        this.addToList(row.id, row.title, row.release_date, FAV_MOVIE_LIST);\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 69\n      },\n      __self: this\n    })), React.createElement(\"td\", {\n      className: \"icon\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 70\n      },\n      __self: this\n    }, React.createElement(\"i\", {\n      className: movieExists(row.id, TO_WATCH_MOVIE_LIST) ? \"fas fa-eye\" : \"far fa-eye-slash\",\n      onClick: () => {\n        this.addToList(row.id, row.title, row.release_date, TO_WATCH_MOVIE_LIST);\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 70\n      },\n      __self: this\n    })))))), React.createElement(Pagination, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75\n      },\n      __self: this\n    }));else {\n      return React.createElement(\"div\", {\n        className: \"table-container\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 81\n        },\n        __self: this\n      }, React.createElement(\"h2\", {\n        className: \"no-results no-selection\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 82\n        },\n        __self: this\n      }, \"Nothing To Watch!\"));\n    }\n  }\n\n}\n\nfunction mapStateToProps(state) {\n  return {\n    movies: state.movies,\n    pageCount: state.pageCount,\n    isAnyData: state.isAnyData,\n    currentPage: state.currentPage,\n    query: state.query\n  };\n}\n\nconst mapDispatchToProps = {\n  refreshMovies,\n  changePage\n};\nexport default connect(mapStateToProps, mapDispatchToProps)(Table);","map":{"version":3,"sources":["E:\\MovieBuff_React-Redux\\src\\table.js"],"names":["React","connect","addMovie","Pagination","FAV_MOVIE_LIST","TO_WATCH_MOVIE_LIST","movieExists","changePage","refreshMovies","Table","Component","constructor","props","state","finalQuery","query","currentPage","getMovies","console","log","componentDidMount","componentDidUpdate","previousProps","previousState","getDerivedStateFromProps","addToList","id","title","relDate","list","forceUpdate","render","isAnyData","movies","map","row","release_date","mapStateToProps","pageCount","mapDispatchToProps"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,OAAOC,QAAP,MAAqB,WAArB;AACA,OAAOC,UAAP,MAAuB,cAAvB;AACA,SAAQC,cAAR,EAAwBC,mBAAxB,EAA6CC,WAA7C,QAA+D,WAA/D;AACA,SAAQC,UAAR,EAAoBC,aAApB,QAAwC,WAAxC;;AAEA,MAAMC,KAAN,SAAoBT,KAAK,CAACU,SAA1B,CAAoC;AAClCC,EAAAA,WAAW,CAACC,KAAD,EAAO;AAChB,UAAMA,KAAN;AACA,SAAKC,KAAL,GAAa;AACTC,MAAAA,UAAU,EAAE,KAAKF,KAAL,CAAWG,KADd;AAETC,MAAAA,WAAW,EAAE;AAFJ,KAAb;AAID;;AAEDC,EAAAA,SAAS,GAAG;AACVC,IAAAA,OAAO,CAACC,GAAR,CAAY,KAAKN,KAAL,CAAWC,UAAvB;AACA,QAAG,KAAKF,KAAL,CAAWG,KAAX,KAAqB,EAAxB,EAA4B;AAC5B,SAAKH,KAAL,CAAWJ,aAAX;AACD;;AAEDY,EAAAA,iBAAiB,GAAG;AAChB,SAAKH,SAAL;AACH;;AAEDI,EAAAA,kBAAkB,CAACC,aAAD,EAAgBC,aAAhB,EAA+B;AAC/C,QAAGA,aAAa,CAACT,UAAd,KAA6B,KAAKD,KAAL,CAAWC,UAA3C,EAAuD;AACrD,WAAKF,KAAL,CAAWL,UAAX,CAAsB,CAAtB;AACN;;;AAGK,KALD,MAMK,IAAGgB,aAAa,CAACP,WAAd,KAA8B,KAAKH,KAAL,CAAWG,WAA5C,EAAwD;AAC3D,WAAKC,SAAL;AACD;AACF;;AAED,SAAOO,wBAAP,CAAgCZ,KAAhC,EAAuCC,KAAvC,EAA8C;AAC5C,WAAM;AACJC,MAAAA,UAAU,EAAEF,KAAK,CAACG,KADd;AAEJC,MAAAA,WAAW,EAAEJ,KAAK,CAACI;AAFf,KAAN;AAID;;AAEDS,EAAAA,SAAS,CAACC,EAAD,EAAKC,KAAL,EAAYC,OAAZ,EAAqBC,IAArB,EAA0B;AACjC3B,IAAAA,QAAQ,CAACwB,EAAD,EAAKC,KAAL,EAAYC,OAAZ,EAAqBC,IAArB,CAAR;AACA,SAAKC,WAAL;AACD;;AAEDC,EAAAA,MAAM,GAAE;AACN,QAAG,KAAKnB,KAAL,CAAWoB,SAAd,EACE,OACE;AAAK,MAAA,SAAS,EAAC,iBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eADF,EAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBAFF,EAGE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAHF,EAIE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAJF,CADF,CADF,EASE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACC,KAAKpB,KAAL,CAAWqB,MAAX,CAAkBC,GAAlB,CAAuBC,GAAD,IACrB;AAAI,MAAA,GAAG,EAAEA,GAAG,CAACT,EAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAKS,GAAG,CAACR,KAAT,CADF,EAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAKQ,GAAG,CAACC,YAAT,CAFF,EAGE;AAAI,MAAA,SAAS,EAAC,MAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAqB;AAAG,MAAA,SAAS,EAAE,CAAC9B,WAAW,CAAC6B,GAAG,CAACT,EAAL,EAAStB,cAAT,CAAX,GAAsC,KAAtC,GAA8C,KAA/C,IAAwD,UAAtE;AAAkF,MAAA,OAAO,EAAE,MAAI;AAAC,aAAKqB,SAAL,CAAeU,GAAG,CAACT,EAAnB,EAAuBS,GAAG,CAACR,KAA3B,EAAkCQ,GAAG,CAACC,YAAtC,EAAoDhC,cAApD;AAAoE,OAApK;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAArB,CAHF,EAIE;AAAI,MAAA,SAAS,EAAC,MAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAqB;AAAG,MAAA,SAAS,EAAEE,WAAW,CAAC6B,GAAG,CAACT,EAAL,EAASrB,mBAAT,CAAX,GAA2C,YAA3C,GAA0D,kBAAxE;AAA4F,MAAA,OAAO,EAAE,MAAI;AAAC,aAAKoB,SAAL,CAAeU,GAAG,CAACT,EAAnB,EAAuBS,GAAG,CAACR,KAA3B,EAAkCQ,GAAG,CAACC,YAAtC,EAAoD/B,mBAApD;AAAyE,OAAnL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAArB,CAJF,CADD,CADD,CATF,CADF,EAqBE,oBAAC,UAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MArBF,CADF,CADF,KA2BK;AACH,aACE;AAAK,QAAA,SAAS,EAAC,iBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE;AAAI,QAAA,SAAS,EAAC,yBAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6BADF,CADF;AAKD;AACF;;AA9EiC;;AAiFpC,SAASgC,eAAT,CAAyBxB,KAAzB,EAAgC;AAC9B,SAAO;AACLoB,IAAAA,MAAM,EAAEpB,KAAK,CAACoB,MADT;AAELK,IAAAA,SAAS,EAAEzB,KAAK,CAACyB,SAFZ;AAGLN,IAAAA,SAAS,EAAEnB,KAAK,CAACmB,SAHZ;AAILhB,IAAAA,WAAW,EAAEH,KAAK,CAACG,WAJd;AAKLD,IAAAA,KAAK,EAAEF,KAAK,CAACE;AALR,GAAP;AAOD;;AAED,MAAMwB,kBAAkB,GAAG;AACzB/B,EAAAA,aADyB;AAEzBD,EAAAA;AAFyB,CAA3B;AAKA,eAAeN,OAAO,CAACoC,eAAD,EAAkBE,kBAAlB,CAAP,CAA6C9B,KAA7C,CAAf","sourcesContent":["import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport addMovie from './globals';\r\nimport Pagination from './pagination';\r\nimport {FAV_MOVIE_LIST, TO_WATCH_MOVIE_LIST, movieExists} from './globals';\r\nimport {changePage, refreshMovies} from './actions';\r\n\r\nclass Table extends React.Component {\r\n  constructor(props){\r\n    super(props);\r\n    this.state = {\r\n        finalQuery: this.props.query,\r\n        currentPage: 1,\r\n    }\r\n  }\r\n\r\n  getMovies() {\r\n    console.log(this.state.finalQuery);\r\n    if(this.props.query === \"\") return;\r\n    this.props.refreshMovies();\r\n  }\r\n\r\n  componentDidMount() {\r\n      this.getMovies();\r\n  }\r\n\r\n  componentDidUpdate(previousProps, previousState) {\r\n    if(previousState.finalQuery !== this.state.finalQuery) {\r\n      this.props.changePage(1)\r\n/*      this.setState({currentPage: 1}, ()=> { //get back to page number one when searching for a new movie\r\n        this.getMovies();\r\n      });*/\r\n    }\r\n    else if(previousState.currentPage !== this.state.currentPage){\r\n      this.getMovies();\r\n    }\r\n  }\r\n\r\n  static getDerivedStateFromProps(props, state) {\r\n    return{\r\n      finalQuery: props.query,\r\n      currentPage: props.currentPage\r\n    };\r\n  }\r\n\r\n  addToList(id, title, relDate, list){\r\n    addMovie(id, title, relDate, list);\r\n    this.forceUpdate();\r\n  }\r\n\r\n  render(){\r\n    if(this.props.isAnyData)\r\n      return (\r\n        <div className=\"table-container\">\r\n          <table>\r\n            <thead>\r\n              <tr>\r\n                <th>Title</th>\r\n                <th>Release Date</th>\r\n                <th>Favorite</th>\r\n                <th>To Watch</th>\r\n              </tr>\r\n            </thead>\r\n            <tbody>\r\n            {this.props.movies.map((row) => (\r\n              <tr key={row.id}>\r\n                <td>{row.title}</td>\r\n                <td>{row.release_date}</td>\r\n                <td className=\"icon\"><i className={(movieExists(row.id, FAV_MOVIE_LIST) ? \"fas\" : \"far\") + \" fa-star\"} onClick={()=>{this.addToList(row.id, row.title, row.release_date, FAV_MOVIE_LIST)}}></i></td>\r\n                <td className=\"icon\"><i className={movieExists(row.id, TO_WATCH_MOVIE_LIST) ? \"fas fa-eye\" : \"far fa-eye-slash\"} onClick={()=>{this.addToList(row.id, row.title, row.release_date, TO_WATCH_MOVIE_LIST)}}></i></td>\r\n              </tr>\r\n            ))}\r\n            </tbody>\r\n          </table>\r\n          <Pagination />\r\n        </div>\r\n\r\n      );\r\n    else {\r\n      return (\r\n        <div className=\"table-container\">\r\n          <h2 className=\"no-results no-selection\">Nothing To Watch!</h2>\r\n        </div>\r\n      );\r\n    }\r\n  }\r\n}\r\n\r\nfunction mapStateToProps(state) {\r\n  return {\r\n    movies: state.movies,\r\n    pageCount: state.pageCount,\r\n    isAnyData: state.isAnyData,\r\n    currentPage: state.currentPage,\r\n    query: state.query\r\n  };\r\n}\r\n\r\nconst mapDispatchToProps = {\r\n  refreshMovies,\r\n  changePage\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Table);\r\n"]},"metadata":{},"sourceType":"module"}
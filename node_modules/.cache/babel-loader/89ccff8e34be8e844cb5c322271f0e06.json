{"ast":null,"code":"var _jsxFileName = \"E:\\\\MovieBuff_React-Redux\\\\src\\\\table.js\";\nimport React from 'react';\nimport addMovie from './globals';\nimport Pagination from './pagination';\nimport { FAV_MOVIE_LIST, TO_WATCH_MOVIE_LIST, API_KEY, movieExists } from './globals';\nimport { changePage, changePageCount, changeIsAnyData, addToFavourites, addToWatchList, updateMovies } from './actions';\nimport store from './store';\n\nclass Table extends React.Component {\n  constructor(props) {\n    super(props);\n    /*    this.state = {\r\n            movies: [],\r\n            isAnyData:false,\r\n            finalQuery: this.props.query,\r\n            currentPage: 1,\r\n        \t\tpageCount: 0,\r\n        }*/\n  }\n\n  getMovies() {\n    let _store$getState = store.getState(),\n        finalQuery = _store$getState.finalQuery,\n        movies = _store$getState.movies,\n        pageCount = _store$getState.pageCount,\n        currentPage = _store$getState.currentPage,\n        isAnyData = _store$getState.isAnyData;\n\n    if (finalQuery === \"\") return;\n    console.log(\"currentPage query: \" + currentPage);\n    fetch('movies.json') //'https://api.themoviedb.org/3/search/movie?query='+ finalQuery + '&api_key=' + API_KEY + \"&page=\" + currentPage)\n    .then(res => res.json()).then(data => {\n      movies = data.results;\n      pageCount = data.total_pages;\n      isAnyData = movies.length > 0;\n      store.dispatch(updateMovies(movies));\n      store.dispatch(changePageCount(pageCount));\n      store.dispatch(changeIsAnyData(isAnyData));\n    }).catch(console.log);\n  }\n\n  componentDidMount() {\n    // const cPage = Number(sessionStorage.getItem(CURRENT_PAGE));\n    // this.setState({\n    //   currentPage: cPage ? cPage : 1\n    // }, ()=>{\n    //   //this.getMovies();\n    // })\n    this.getMovies();\n  }\n  /*componentDidUpdate(previousProps, previousState) {\r\n    if(previousState.finalQuery !== this.state.finalQuery) {\r\n      this.setState({currentPage: 1}, ()=> { //get back to page number one when searching for a new movie\r\n        this.getMovies();\r\n      });\r\n    }\r\n    else if(previousState.currentPage !== this.state.currentPage){\r\n      this.getMovies();\r\n    }\r\n  }*/\n\n  /*static getDerivedStateFromProps(props, state) {\r\n    return{finalQuery: props.query};\r\n  }*/\n\n\n  addToList(id, title, relDate, list) {\n    addMovie(id, title, relDate, list);\n    this.forceUpdate();\n  }\n\n  render() {\n    if (store.getState().isAnyData) return React.createElement(\"div\", {\n      className: \"table-container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 71\n      },\n      __self: this\n    }, React.createElement(\"table\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72\n      },\n      __self: this\n    }, React.createElement(\"thead\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73\n      },\n      __self: this\n    }, React.createElement(\"tr\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74\n      },\n      __self: this\n    }, React.createElement(\"th\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75\n      },\n      __self: this\n    }, \"Title\"), React.createElement(\"th\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76\n      },\n      __self: this\n    }, \"Release Date\"), React.createElement(\"th\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 77\n      },\n      __self: this\n    }, \"Favorite\"), React.createElement(\"th\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78\n      },\n      __self: this\n    }, \"To Watch\"))), React.createElement(\"tbody\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 81\n      },\n      __self: this\n    }, store.getState().movies.map(row => React.createElement(\"tr\", {\n      key: row.id,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83\n      },\n      __self: this\n    }, React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 84\n      },\n      __self: this\n    }, row.title), React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 85\n      },\n      __self: this\n    }, row.release_date), React.createElement(\"td\", {\n      className: \"icon\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 86\n      },\n      __self: this\n    }, React.createElement(\"i\", {\n      className: (movieExists(row.id, FAV_MOVIE_LIST) ? \"fas\" : \"far\") + \" fa-star\",\n      onClick: () => {\n        this.addToList(row.id, row.title, row.release_date, FAV_MOVIE_LIST);\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 86\n      },\n      __self: this\n    })), React.createElement(\"td\", {\n      className: \"icon\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 87\n      },\n      __self: this\n    }, React.createElement(\"i\", {\n      className: movieExists(row.id, TO_WATCH_MOVIE_LIST) ? \"fas fa-eye\" : \"far fa-eye-slash\",\n      onClick: () => {\n        this.addToList(row.id, row.title, row.release_date, TO_WATCH_MOVIE_LIST);\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 87\n      },\n      __self: this\n    })))))), React.createElement(Pagination, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 92\n      },\n      __self: this\n    }));else {\n      return React.createElement(\"div\", {\n        className: \"table-container\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 98\n        },\n        __self: this\n      }, React.createElement(\"h2\", {\n        className: \"no-results no-selection\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 99\n        },\n        __self: this\n      }, \"Nothing To Watch!\"));\n    }\n  }\n\n}\n\nexport default Table;","map":{"version":3,"sources":["E:\\MovieBuff_React-Redux\\src\\table.js"],"names":["React","addMovie","Pagination","FAV_MOVIE_LIST","TO_WATCH_MOVIE_LIST","API_KEY","movieExists","changePage","changePageCount","changeIsAnyData","addToFavourites","addToWatchList","updateMovies","store","Table","Component","constructor","props","getMovies","getState","finalQuery","movies","pageCount","currentPage","isAnyData","console","log","fetch","then","res","json","data","results","total_pages","length","dispatch","catch","componentDidMount","addToList","id","title","relDate","list","forceUpdate","render","map","row","release_date"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport addMovie from './globals';\r\nimport Pagination from './pagination';\r\nimport {FAV_MOVIE_LIST, TO_WATCH_MOVIE_LIST, API_KEY, movieExists} from './globals';\r\nimport {changePage, changePageCount, changeIsAnyData, addToFavourites, addToWatchList, updateMovies} from './actions';\r\nimport store from './store';\r\n\r\nclass Table extends React.Component {\r\n  constructor(props){\r\n    super(props);\r\n/*    this.state = {\r\n        movies: [],\r\n        isAnyData:false,\r\n        finalQuery: this.props.query,\r\n        currentPage: 1,\r\n    \t\tpageCount: 0,\r\n    }*/\r\n  }\r\n\r\n  getMovies() {\r\n    let {finalQuery, movies, pageCount, currentPage, isAnyData} = store.getState();\r\n    if(finalQuery === \"\") return;\r\n    console.log(\"currentPage query: \" + currentPage);\r\n    fetch('movies.json')//'https://api.themoviedb.org/3/search/movie?query='+ finalQuery + '&api_key=' + API_KEY + \"&page=\" + currentPage)\r\n    .then(res => res.json())\r\n    .then((data) => {\r\n      movies = data.results;\r\n      pageCount = data.total_pages;\r\n      isAnyData = movies.length > 0;\r\n      store.dispatch(updateMovies(movies));\r\n      store.dispatch(changePageCount(pageCount));\r\n      store.dispatch(changeIsAnyData(isAnyData));\r\n    })\r\n    .catch(console.log);\r\n  }\r\n\r\n  componentDidMount() {\r\n      // const cPage = Number(sessionStorage.getItem(CURRENT_PAGE));\r\n      // this.setState({\r\n      //   currentPage: cPage ? cPage : 1\r\n      // }, ()=>{\r\n      //   //this.getMovies();\r\n      // })\r\n      this.getMovies();\r\n\r\n  }\r\n\r\n  /*componentDidUpdate(previousProps, previousState) {\r\n    if(previousState.finalQuery !== this.state.finalQuery) {\r\n      this.setState({currentPage: 1}, ()=> { //get back to page number one when searching for a new movie\r\n        this.getMovies();\r\n      });\r\n    }\r\n    else if(previousState.currentPage !== this.state.currentPage){\r\n      this.getMovies();\r\n    }\r\n  }*/\r\n\r\n  /*static getDerivedStateFromProps(props, state) {\r\n    return{finalQuery: props.query};\r\n  }*/\r\n\r\n  addToList(id, title, relDate, list){\r\n    addMovie(id, title, relDate, list);\r\n    this.forceUpdate();\r\n  }\r\n\r\n  render(){\r\n    if(store.getState().isAnyData)\r\n      return (\r\n        <div className=\"table-container\">\r\n          <table>\r\n            <thead>\r\n              <tr>\r\n                <th>Title</th>\r\n                <th>Release Date</th>\r\n                <th>Favorite</th>\r\n                <th>To Watch</th>\r\n              </tr>\r\n            </thead>\r\n            <tbody>\r\n            {store.getState().movies.map((row) => (\r\n              <tr key={row.id}>\r\n                <td>{row.title}</td>\r\n                <td>{row.release_date}</td>\r\n                <td className=\"icon\"><i className={(movieExists(row.id, FAV_MOVIE_LIST) ? \"fas\" : \"far\") + \" fa-star\"} onClick={()=>{this.addToList(row.id, row.title, row.release_date, FAV_MOVIE_LIST)}}></i></td>\r\n                <td className=\"icon\"><i className={movieExists(row.id, TO_WATCH_MOVIE_LIST) ? \"fas fa-eye\" : \"far fa-eye-slash\"} onClick={()=>{this.addToList(row.id, row.title, row.release_date, TO_WATCH_MOVIE_LIST)}}></i></td>\r\n              </tr>\r\n            ))}\r\n            </tbody>\r\n          </table>\r\n          <Pagination />\r\n        </div>\r\n\r\n      );\r\n    else {\r\n      return (\r\n        <div className=\"table-container\">\r\n          <h2 className=\"no-results no-selection\">Nothing To Watch!</h2>\r\n        </div>\r\n      );\r\n    }\r\n  }\r\n}\r\n\r\nexport default Table;\r\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"var _jsxFileName = \"E:\\\\MovieBuff_React-Redux\\\\src\\\\table.js\";\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport addMovie from './globals';\nimport Pagination from './pagination';\nimport { FAV_MOVIE_LIST, TO_WATCH_MOVIE_LIST, API_KEY, movieExists } from './globals';\nimport { changePageCount, changeIsAnyData, updateMovies } from './actions';\nimport fake_movies from './movies';\nimport store from './store';\n\nclass Table extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.getFakeMovies = movies => movies.title.indexOf(this.props.query) > -1;\n\n    this.state = {\n      //movies: [],\n      //isAnyData:false,\n      finalQuery: this.props.query,\n      currentPage: 1 //pageCount: 0,\n\n    };\n  }\n\n  getMovies() {\n    let _this$props = this.props,\n        query = _this$props.query,\n        movies = _this$props.movies,\n        pageCount = _this$props.pageCount,\n        isAnyData = _this$props.isAnyData;\n    this.setState({\n      finalQuery: this.props.query\n    });\n    if (query === \"\") return;\n    /*fetch('movies.json')//'https://api.themoviedb.org/3/search/movie?query='+ finalQuery + '&api_key=' + API_KEY + \"&page=\" + currentPage)\r\n    .then(res => res.json())\r\n    .then((data) => {\r\n      movies = data.results;\r\n      pageCount = data.total_pages;\r\n      isAnyData = movies.length > 0;\r\n      this.props.dispatch(updateMovies(movies));\r\n      this.props.dispatch(changePageCount(pageCount));\r\n      this.props.dispatch(changeIsAnyData(isAnyData));\r\n    })\r\n    .catch(console.log);\r\n    */\n\n    movies = fake_movies.results;\n    pageCount = fake_movies.total_pages;\n    isAnyData = movies.length > 0;\n    this.props.updateMovies(movies.filter(this.getFakeMovies));\n    this.props.changePageCount(pageCount);\n    this.props.changeIsAnyData(isAnyData);\n    console.log(\"getMovies():\");\n    console.log(this.props);\n  }\n\n  componentDidMount() {\n    // const cPage = Number(sessionStorage.getItem(CURRENT_PAGE));\n    // this.setState({\n    //   currentPage: cPage ? cPage : 1\n    // }, ()=>{\n    //   //this.getMovies();\n    // })\n    console.log(this.props);\n    console.log(\"states:\");\n    console.log(store.getState());\n    this.getMovies();\n  }\n\n  componentDidUpdate(previousProps, previousState) {\n    /*if(previousState.finalQuery !== this.state.finalQuery) {\r\n      this.setState({currentPage: 1}, ()=> { //get back to page number one when searching for a new movie\r\n        this.getMovies();\r\n      });\r\n    }\r\n    else if(previousState.currentPage !== this.state.currentPage){*/\n    this.getMovies(); //}\n  }\n  /*static getDerivedStateFromProps(props, state) {\r\n    return{finalQuery: props.query};\r\n  }*/\n\n\n  addToList(id, title, relDate, list) {\n    addMovie(id, title, relDate, list);\n    this.forceUpdate();\n  }\n\n  render() {\n    console.log(\"render\");\n    if (this.props.isAnyData) return React.createElement(\"div\", {\n      className: \"table-container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 92\n      },\n      __self: this\n    }, React.createElement(\"table\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 93\n      },\n      __self: this\n    }, React.createElement(\"thead\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 94\n      },\n      __self: this\n    }, React.createElement(\"tr\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 95\n      },\n      __self: this\n    }, React.createElement(\"th\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 96\n      },\n      __self: this\n    }, \"Title\"), React.createElement(\"th\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 97\n      },\n      __self: this\n    }, \"Release Date\"), React.createElement(\"th\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 98\n      },\n      __self: this\n    }, \"Favorite\"), React.createElement(\"th\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 99\n      },\n      __self: this\n    }, \"To Watch\"))), React.createElement(\"tbody\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 102\n      },\n      __self: this\n    }, this.props.movies.map(row => React.createElement(\"tr\", {\n      key: row.id,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 104\n      },\n      __self: this\n    }, React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 105\n      },\n      __self: this\n    }, row.title), React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 106\n      },\n      __self: this\n    }, row.release_date), React.createElement(\"td\", {\n      className: \"icon\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 107\n      },\n      __self: this\n    }, React.createElement(\"i\", {\n      className: (movieExists(row.id, FAV_MOVIE_LIST) ? \"fas\" : \"far\") + \" fa-star\",\n      onClick: () => {\n        this.addToList(row.id, row.title, row.release_date, FAV_MOVIE_LIST);\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 107\n      },\n      __self: this\n    })), React.createElement(\"td\", {\n      className: \"icon\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 108\n      },\n      __self: this\n    }, React.createElement(\"i\", {\n      className: movieExists(row.id, TO_WATCH_MOVIE_LIST) ? \"fas fa-eye\" : \"far fa-eye-slash\",\n      onClick: () => {\n        this.addToList(row.id, row.title, row.release_date, TO_WATCH_MOVIE_LIST);\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 108\n      },\n      __self: this\n    })))))), React.createElement(Pagination, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 113\n      },\n      __self: this\n    }));else {\n      return React.createElement(\"div\", {\n        className: \"table-container\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 119\n        },\n        __self: this\n      }, React.createElement(\"h2\", {\n        className: \"no-results no-selection\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 120\n        },\n        __self: this\n      }, \"Nothing To Watch!\"));\n    }\n  }\n\n}\n\nfunction mapStateToProps(state) {\n  return {\n    movies: state.movies,\n    pageCount: state.pageCount,\n    isAnyData: state.isAnyData,\n    query: state.query\n  };\n}\n\nconst mapDispatchToProps = {\n  changePageCount,\n  changeIsAnyData,\n  updateMovies\n};\nexport default connect(mapStateToProps, mapDispatchToProps)(Table);","map":{"version":3,"sources":["E:\\MovieBuff_React-Redux\\src\\table.js"],"names":["React","connect","addMovie","Pagination","FAV_MOVIE_LIST","TO_WATCH_MOVIE_LIST","API_KEY","movieExists","changePageCount","changeIsAnyData","updateMovies","fake_movies","store","Table","Component","constructor","props","getFakeMovies","movies","title","indexOf","query","state","finalQuery","currentPage","getMovies","pageCount","isAnyData","setState","results","total_pages","length","filter","console","log","componentDidMount","getState","componentDidUpdate","previousProps","previousState","addToList","id","relDate","list","forceUpdate","render","map","row","release_date","mapStateToProps","mapDispatchToProps"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport addMovie from './globals';\r\nimport Pagination from './pagination';\r\nimport {FAV_MOVIE_LIST, TO_WATCH_MOVIE_LIST, API_KEY, movieExists} from './globals';\r\nimport {changePageCount, changeIsAnyData, updateMovies} from './actions';\r\nimport fake_movies from './movies';\r\nimport store from './store';\r\n\r\nclass Table extends React.Component {\r\n  constructor(props){\r\n    super(props);\r\n    this.state = {\r\n        //movies: [],\r\n        //isAnyData:false,\r\n        finalQuery: this.props.query,\r\n        currentPage: 1,\r\n    \t\t//pageCount: 0,\r\n    }\r\n  }\r\n\r\n  getFakeMovies = (movies) => movies.title.indexOf(this.props.query) > -1;\r\n\r\n  getMovies() {\r\n    let {query, movies, pageCount, isAnyData} = this.props;\r\n    this.setState({\r\n      finalQuery:this.props.query\r\n    });\r\n    if(query === \"\") return;\r\n\r\n    /*fetch('movies.json')//'https://api.themoviedb.org/3/search/movie?query='+ finalQuery + '&api_key=' + API_KEY + \"&page=\" + currentPage)\r\n    .then(res => res.json())\r\n    .then((data) => {\r\n      movies = data.results;\r\n      pageCount = data.total_pages;\r\n      isAnyData = movies.length > 0;\r\n      this.props.dispatch(updateMovies(movies));\r\n      this.props.dispatch(changePageCount(pageCount));\r\n      this.props.dispatch(changeIsAnyData(isAnyData));\r\n    })\r\n    .catch(console.log);\r\n*/\r\n    movies = fake_movies.results;\r\n    pageCount = fake_movies.total_pages;\r\n    isAnyData = movies.length > 0;\r\n    this.props.updateMovies(movies.filter(this.getFakeMovies));\r\n    this.props.changePageCount(pageCount);\r\n    this.props.changeIsAnyData(isAnyData);\r\n    console.log(\"getMovies():\");\r\n    console.log(this.props);\r\n\r\n  }\r\n\r\n  componentDidMount() {\r\n      // const cPage = Number(sessionStorage.getItem(CURRENT_PAGE));\r\n      // this.setState({\r\n      //   currentPage: cPage ? cPage : 1\r\n      // }, ()=>{\r\n      //   //this.getMovies();\r\n      // })\r\n      console.log(this.props);\r\n      console.log(\"states:\");\r\n      console.log(store.getState());\r\n      this.getMovies();\r\n\r\n  }\r\n\r\n  componentDidUpdate(previousProps, previousState) {\r\n    /*if(previousState.finalQuery !== this.state.finalQuery) {\r\n      this.setState({currentPage: 1}, ()=> { //get back to page number one when searching for a new movie\r\n        this.getMovies();\r\n      });\r\n    }\r\n    else if(previousState.currentPage !== this.state.currentPage){*/\r\n      this.getMovies();\r\n    //}\r\n  }\r\n\r\n  /*static getDerivedStateFromProps(props, state) {\r\n    return{finalQuery: props.query};\r\n  }*/\r\n\r\n  addToList(id, title, relDate, list){\r\n    addMovie(id, title, relDate, list);\r\n    this.forceUpdate();\r\n  }\r\n\r\n  render(){\r\n    console.log(\"render\");\r\n    if(this.props.isAnyData)\r\n      return (\r\n        <div className=\"table-container\">\r\n          <table>\r\n            <thead>\r\n              <tr>\r\n                <th>Title</th>\r\n                <th>Release Date</th>\r\n                <th>Favorite</th>\r\n                <th>To Watch</th>\r\n              </tr>\r\n            </thead>\r\n            <tbody>\r\n            {this.props.movies.map((row) => (\r\n              <tr key={row.id}>\r\n                <td>{row.title}</td>\r\n                <td>{row.release_date}</td>\r\n                <td className=\"icon\"><i className={(movieExists(row.id, FAV_MOVIE_LIST) ? \"fas\" : \"far\") + \" fa-star\"} onClick={()=>{this.addToList(row.id, row.title, row.release_date, FAV_MOVIE_LIST)}}></i></td>\r\n                <td className=\"icon\"><i className={movieExists(row.id, TO_WATCH_MOVIE_LIST) ? \"fas fa-eye\" : \"far fa-eye-slash\"} onClick={()=>{this.addToList(row.id, row.title, row.release_date, TO_WATCH_MOVIE_LIST)}}></i></td>\r\n              </tr>\r\n            ))}\r\n            </tbody>\r\n          </table>\r\n          <Pagination />\r\n        </div>\r\n\r\n      );\r\n    else {\r\n      return (\r\n        <div className=\"table-container\">\r\n          <h2 className=\"no-results no-selection\">Nothing To Watch!</h2>\r\n        </div>\r\n      );\r\n    }\r\n  }\r\n}\r\n\r\nfunction mapStateToProps(state) {\r\n  return {\r\n    movies: state.movies,\r\n    pageCount: state.pageCount,\r\n    isAnyData: state.isAnyData,\r\n    query: state.query\r\n  };\r\n}\r\n\r\nconst mapDispatchToProps = {\r\n  changePageCount,\r\n  changeIsAnyData,\r\n  updateMovies\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Table);\r\n"]},"metadata":{},"sourceType":"module"}
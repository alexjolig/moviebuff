{"ast":null,"code":"var _jsxFileName = \"E:\\\\MovieBuff_React-Redux\\\\src\\\\table.js\";\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport addMovie from './globals';\nimport Pagination from './pagination';\nimport RealTable from './real_table';\nimport { FAV_MOVIE_LIST, TO_WATCH_MOVIE_LIST, movieExists } from './globals';\nimport { changePage, refreshMovies } from './actions';\n\nclass Table extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      finalQuery: this.props.query,\n      currentPage: 1\n    };\n  }\n\n  getMovies() {\n    if (this.props.query === \"\") return;\n    this.props.refreshMovies();\n  }\n\n  componentDidMount() {\n    this.getMovies();\n  }\n\n  componentDidUpdate(previousProps, previousState) {\n    if (previousState.finalQuery !== this.state.finalQuery) {\n      //to get back to page number one when searching for a new movie, we have to set both store state and this component state\n      this.props.changePage(1);\n      this.setState({\n        currentPage: 1\n      }, () => {\n        this.getMovies();\n      });\n    } else if (previousState.currentPage !== this.state.currentPage) {\n      this.getMovies();\n    }\n  }\n\n  static getDerivedStateFromProps(props, state) {\n    return {\n      finalQuery: props.query,\n      currentPage: props.currentPage\n    };\n  } //add selected movie to favorites or to-watch list\n\n\n  addToList(id, title, relDate, list) {\n    addMovie(id, title, relDate, list);\n    this.forceUpdate();\n  }\n  /*\r\n    render(){\r\n      if(this.props.isAnyData)\r\n        return (\r\n          <div className=\"table-container\">\r\n            <table>\r\n              <thead>\r\n                <tr>\r\n                  <th>Title</th>\r\n                  <th>Release Date</th>\r\n                  <th>Favorite</th>\r\n                  <th>To Watch</th>\r\n                </tr>\r\n              </thead>\r\n              <tbody>\r\n              {this.props.movies.map((row) => (\r\n                <tr key={row.id}>\r\n                  <td>{row.title}</td>\r\n                  <td>{row.release_date}</td>\r\n                  <td className=\"icon\"><i className={(movieExists(row.id, FAV_MOVIE_LIST) ? \"fas\" : \"far\") + \" fa-star\"} onClick={()=>{this.addToList(row.id, row.title, row.release_date, FAV_MOVIE_LIST)}}></i></td>\r\n                  <td className=\"icon\"><i className={movieExists(row.id, TO_WATCH_MOVIE_LIST) ? \"fas fa-eye\" : \"far fa-eye-slash\"} onClick={()=>{this.addToList(row.id, row.title, row.release_date, TO_WATCH_MOVIE_LIST)}}></i></td>\r\n                </tr>\r\n              ))}\r\n              </tbody>\r\n            </table>\r\n            <Pagination />\r\n          </div>\r\n  \r\n        );\r\n      else {\r\n        return (\r\n          <div className=\"table-container\">\r\n            <h2 className=\"no-results no-selection\">Nothing To Watch!</h2>\r\n          </div>\r\n        );\r\n      }\r\n    }\r\n    */\n\n\n  render() {\n    if (this.props.isAnyData) return React.createElement(RealTable, {\n      movies: this.props.movies,\n      hasPagination: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 93\n      },\n      __self: this\n    });else {\n      return React.createElement(\"div\", {\n        className: \"table-container\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 97\n        },\n        __self: this\n      }, React.createElement(\"h2\", {\n        className: \"no-results no-selection\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 98\n        },\n        __self: this\n      }, \"Nothing To Watch!\"));\n    }\n  }\n\n}\n\nfunction mapStateToProps(state) {\n  return {\n    movies: state.movies,\n    isAnyData: state.isAnyData,\n    currentPage: state.currentPage,\n    query: state.query\n  };\n}\n\nconst mapDispatchToProps = {\n  refreshMovies,\n  changePage\n};\nexport default connect(mapStateToProps, mapDispatchToProps)(Table);","map":{"version":3,"sources":["E:\\MovieBuff_React-Redux\\src\\table.js"],"names":["React","connect","addMovie","Pagination","RealTable","FAV_MOVIE_LIST","TO_WATCH_MOVIE_LIST","movieExists","changePage","refreshMovies","Table","Component","constructor","props","state","finalQuery","query","currentPage","getMovies","componentDidMount","componentDidUpdate","previousProps","previousState","setState","getDerivedStateFromProps","addToList","id","title","relDate","list","forceUpdate","render","isAnyData","movies","mapStateToProps","mapDispatchToProps"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport addMovie from './globals';\r\nimport Pagination from './pagination';\r\nimport RealTable from './real_table'\r\nimport {FAV_MOVIE_LIST, TO_WATCH_MOVIE_LIST, movieExists} from './globals';\r\nimport {changePage, refreshMovies} from './actions';\r\n\r\nclass Table extends React.Component {\r\n  constructor(props){\r\n    super(props);\r\n    this.state = {\r\n        finalQuery: this.props.query,\r\n        currentPage: 1,\r\n    }\r\n  }\r\n\r\n  getMovies() {\r\n    if(this.props.query === \"\") return;\r\n    this.props.refreshMovies();\r\n  }\r\n\r\n  componentDidMount() {\r\n      this.getMovies();\r\n  }\r\n\r\n  componentDidUpdate(previousProps, previousState) {\r\n    if(previousState.finalQuery !== this.state.finalQuery) {\r\n      //to get back to page number one when searching for a new movie, we have to set both store state and this component state\r\n      this.props.changePage(1)\r\n      this.setState({currentPage: 1}, ()=> {\r\n        this.getMovies();\r\n      });\r\n    }\r\n    else if(previousState.currentPage !== this.state.currentPage){\r\n      this.getMovies();\r\n    }\r\n  }\r\n\r\n  static getDerivedStateFromProps(props, state) {\r\n    return{\r\n      finalQuery: props.query,\r\n      currentPage: props.currentPage\r\n    };\r\n  }\r\n\r\n  //add selected movie to favorites or to-watch list\r\n  addToList(id, title, relDate, list){\r\n    addMovie(id, title, relDate, list);\r\n    this.forceUpdate();\r\n  }\r\n/*\r\n  render(){\r\n    if(this.props.isAnyData)\r\n      return (\r\n        <div className=\"table-container\">\r\n          <table>\r\n            <thead>\r\n              <tr>\r\n                <th>Title</th>\r\n                <th>Release Date</th>\r\n                <th>Favorite</th>\r\n                <th>To Watch</th>\r\n              </tr>\r\n            </thead>\r\n            <tbody>\r\n            {this.props.movies.map((row) => (\r\n              <tr key={row.id}>\r\n                <td>{row.title}</td>\r\n                <td>{row.release_date}</td>\r\n                <td className=\"icon\"><i className={(movieExists(row.id, FAV_MOVIE_LIST) ? \"fas\" : \"far\") + \" fa-star\"} onClick={()=>{this.addToList(row.id, row.title, row.release_date, FAV_MOVIE_LIST)}}></i></td>\r\n                <td className=\"icon\"><i className={movieExists(row.id, TO_WATCH_MOVIE_LIST) ? \"fas fa-eye\" : \"far fa-eye-slash\"} onClick={()=>{this.addToList(row.id, row.title, row.release_date, TO_WATCH_MOVIE_LIST)}}></i></td>\r\n              </tr>\r\n            ))}\r\n            </tbody>\r\n          </table>\r\n          <Pagination />\r\n        </div>\r\n\r\n      );\r\n    else {\r\n      return (\r\n        <div className=\"table-container\">\r\n          <h2 className=\"no-results no-selection\">Nothing To Watch!</h2>\r\n        </div>\r\n      );\r\n    }\r\n  }\r\n  */\r\n  render(){\r\n    if(this.props.isAnyData)\r\n      return (\r\n          <RealTable movies={this.props.movies} hasPagination={true}/>\r\n      );\r\n    else {\r\n      return (\r\n        <div className=\"table-container\">\r\n          <h2 className=\"no-results no-selection\">Nothing To Watch!</h2>\r\n        </div>\r\n      );\r\n    }\r\n  }\r\n}\r\n\r\nfunction mapStateToProps(state) {\r\n  return {\r\n    movies: state.movies,\r\n    isAnyData: state.isAnyData,\r\n    currentPage: state.currentPage,\r\n    query: state.query\r\n  };\r\n}\r\n\r\nconst mapDispatchToProps = {\r\n  refreshMovies,\r\n  changePage\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Table);\r\n"]},"metadata":{},"sourceType":"module"}